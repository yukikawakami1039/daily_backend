[1mdiff --git a/server.js b/server.js[m
[1mindex fc60284..5de14aa 100644[m
[1m--- a/server.js[m
[1m+++ b/server.js[m
[36m@@ -1,6 +1,5 @@[m
 // backend/server.js[m
 const express = require('express');[m
[31m-const mongoose = require('mongoose');[m
 const app = express();[m
 const PORT = process.env.PORT || 3000;[m
 const auth = require('./src/routes/auth');[m
[1mdiff --git a/src/routes/auth.js b/src/routes/auth.js[m
[1mindex fe07dc8..2cd69d3 100644[m
[1m--- a/src/routes/auth.js[m
[1m+++ b/src/routes/auth.js[m
[36m@@ -1,105 +1,31 @@[m
 //authのルーティング[m
 const router = require('express').Router();[m
[31m-const { body, validationResult } = require('express-validator');[m
[31m-const { User } = require('../models/User');[m
[31m-const bcrypt = require('bcrypt');[m
[31m-const jwt = require('jsonwebtoken');[m
[32m+[m[32mconst { body } = require('express-validator');[m
 const dotenv = require('dotenv');[m
 dotenv.config();[m
[31m-const mongoose = require('mongoose');[m
[31m-const { authenticateToken } = require('../middlewares/auth');[m
[31m-//ログイン[m
[32m+[m[32mconst { authenticateToken } = require('../middleware/auth');[m
[32m+[m[32mconst authController = require('../controllers/authController');[m
[32m+[m[32m//ログイン(test)[m
 router.get('/auth', (req, res) => {[m
   res.send('auth');[m
 });[m
 [m
[31m-//ユーザー新規登録用API[m
[32m+[m[32m//ユーザー新規登録[m
 router.post('/register', [m
[31m-    body('userName').notEmpty(),[m
[31m-    body('email').isEmail(), [m
[31m-    body('password').isLength({ min: 6 }), [m
[31m-    async (req, res) => {[m
[31m-        try {[m
[31m-            const userName = req.body.userName;[m
[31m-            const email = req.body.email;[m
[31m-            const password = req.body.password;[m
[31m-            //バリデーション[m
[31m-            const errors = validationResult(req);[m
[31m-        if (!errors.isEmpty()) {[m
[31m-            return res.status(400).json({ errors: errors.array() });[m
[31m-        }[m
[31m-        //ユーザーが存在するか確認[m
[31m-        const user = await User.findOne({ email: email });[m
[31m-        if (user) {[m
[31m-            return res.status(400).json([[m
[31m-                {[m
[31m-                    message: 'すでにそのユーザーが存在しています'[m
[31m-                }[m
[31m-            ]);[m
[31m-        }[m
[31m-        //パスワードをハッシュ化[m
[31m-        let hashedPassword = await bcrypt.hash(password, 10);[m
[31m-[m
[31m-        //dbに保存[m
[31m-        const newUser = await User.create({ userName, email, password: hashedPassword });[m
[31m-        await newUser.save();[m
[31m-[m
[31m-        //JWTを発行[m
[31m-        const token = jwt.sign({ id: newUser._id, email: newUser.email },[m
[31m-        process.env.JWT_SECRET,[m
[31m-        { expiresIn: '24h' }[m
[31m-        );[m
[31m-[m
[31m-        return res.status(200).json({ token });[m
[31m-    } catch (error) {[m
[31m-        return res.status(500).json({ message: 'サーバーエラー' });[m
[31m-    }[m
[31m-});[m
[32m+[m[32m    [    body('userName').notEmpty(),[m
[32m+[m[32m        body('email').isEmail(),[m[41m [m
[32m+[m[32m        body('password').isLength({ min: 6 }),[m[41m [m
[32m+[m[32m    ],[m
[32m+[m[32m    authController.register[m
[32m+[m[32m);[m
 [m
[31m-//ログイン用API[m
[31m-router.post('/login', async (req, res) => { [m
[31m-    try {[m
[31m-        const email = req.body.email;[m
[31m-        const password = req.body.password;[m
[31m-[m
[31m-    const user = await User.findOne({ email: email });[m
[31m-    if (!user) {[m
[31m-        return res.status(400).json([{ message: 'ユーザーが存在しません' }]);[m
[31m-    }[m
[31m-[m
[31m-    //パスワードの複合、照合[m
[31m-    const isMatch = await bcrypt.compare(password, user.password);[m
[31m-    if (!isMatch) {[m
[31m-        return res.status(400).json([{ message: 'パスワードが間違っています' }]);[m
[31m-    }[m
[31m-[m
[31m-    //JWTを発行[m
[31m-    const token = await jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: '24h' });[m
[31m-    return res.status(200).json({ token });[m
[31m-    } catch (error) {[m
[31m-        return res.status(500).json({ message: 'サーバーエラー' });[m
[31m-    }[m
[31m-});[m
[31m-[m
[31m-[m
[31m-[m
[31m-//DBのユーザーを確認[m
[31m-router.get("/allUsers", authenticateToken, async (req, res) => {[m
[31m-    const users = await User.find({},{password:0});[m
[31m-    try {[m
[31m-        return res.status(200).json(users);[m
[31m-    } catch (error) {[m
[31m-        return res.status(500).json({ message: 'サーバーエラー' });[m
[31m-    }[m
[31m-});[m
[31m-[m
[31m-//得たユーザー情報をもとに日記の記入等進める[m
[32m+[m[32m//ログイン[m
[32m+[m[32mrouter.post('/login', authController.login);[m
 [m
[32m+[m[32m//ユーザー一覧取得[m
[32m+[m[32mrouter.get('/allUsers', authenticateToken, authController.allUsers);[m
 [m
 //ユーザーのデータを更新(frontendから送信されたデータを更新)[m
[31m-router.put("/updateUser", authenticateToken, async (req, res) => {[m
[31m-    const userName = req.body.userName;[m
[31m-    const email = req.body.email;[m
[31m-    const password = req.body.password;[m
[31m-});[m
[32m+[m[32m//router.put("/updateUser", authenticateToken, authController.updateUser);[m
[32m+[m
 module.exports = router;[m
\ No newline at end of file[m
